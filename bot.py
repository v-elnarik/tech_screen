import os
import logging
import asyncio
import threading
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from fastapi import FastAPI
from dotenv import load_dotenv
import uvicorn

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if TOKEN:
    logging.info(f"‚úÖ TELEGRAM_BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–ª–∏–Ω–∞: {len(TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")
else:
    logging.error("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
try:
    bot = Bot(token=TOKEN)
    dp = Dispatcher()  # aiogram 3.x
    logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    raise

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message(Command("start"))
async def start_command(message: types.Message):
    logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", web_app=WebAppInfo(url="https://your-web-app-url.com"))]
    ])
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.",
        reply_markup=keyboard
    )

# === –°–æ–∑–¥–∞–µ–º FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = FastAPI()

@app.get("/")
async def root():
    return {"status": "OK", "message": "FastAPI —Ä–∞–±–æ—Ç–∞–µ—Ç"}

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ polling –±–æ—Ç–∞ (aiogram 3.x) ===
async def start_bot():
    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot.delete_webhook(drop_pending_updates=True)  # –ß–∏—Å—Ç–∏–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
        raise

# === –ó–∞–ø—É—Å–∫ FastAPI –∏ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    logging.info("üî• –°—Ç–∞—Ä—Ç—É–µ–º FastAPI –∏ –±–æ—Ç–∞...")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=asyncio.run, args=(start_bot(),), daemon=True)
    bot_thread.start()

    # –ó–∞–ø—É—Å–∫ FastAPI
    uvicorn.run(app, host="0.0.0.0", port=8000)
